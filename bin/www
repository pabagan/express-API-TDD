#!/usr/bin/env node
var app = require('../app');
var config = require('../config/config');
var debug = require('debug')('express-api:server');
var http = require('http');
var https = require('https');


/**
 * 
 * HTTP server
 * 
 */
var port = normalizePort(config.ports.default);
var server = http.createServer(app);
app.set('port', port);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * 
 * HTTPS server
 * 
 */
var sslOptions = {
  key: config.ssl.key,
  cert: config.ssl.cert,
  passphrase: process.env.SSL_PASSPHRASE
};

var securePort = normalizePort(config.ports.secure);
var secureServer = https.createServer(sslOptions, app);
app.set('secure-port', securePort);
secureServer.listen(securePort);
secureServer.on('error', onError);
secureServer.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
